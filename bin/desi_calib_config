#!/usr/bin/env python

import yaml
import os,sys
import argparse
import datetime
import ast
from copy import deepcopy
import subprocess

def safe_eval(s):
    try:
        return ast.literal_eval(s)
    except (ValueError, SyntaxError):
        return s

def load_yaml(file_path):
    with open(file_path, 'r') as file:
        return yaml.safe_load(file)

# Define a custom representer for lists
class CustomRepresenter(yaml.representer.SafeRepresenter):
    def represent_list(self, data, depth=0):
        # Apply flow style only for a given depth
        if depth >= 1:
            return self.represent_sequence('tag:yaml.org,2002:seq', data, flow_style=False)
        else:
            return self.represent_sequence('tag:yaml.org,2002:seq', data, flow_style=True)

# Add the custom representer to the SafeDumper
CustomRepresenter.add_representer(list, CustomRepresenter.represent_list)

# Define a custom dumper that uses the custom representer
class CustomDumper(yaml.SafeDumper):
    pass
CustomDumper.add_representer(list, CustomRepresenter.represent_list)

def save_yaml(data, file_path):
    with open(file_path, 'w') as file:
        yaml.dump_all([data], file, Dumper=CustomDumper,sort_keys=False)

def yes_or_no(question):
    yn = input(question.replace("?","").strip()+" (y/n)? ")
    while yn.lower() not in ['y','n'] :
        yn = input("Please type 'y' or 'n'? ")
    return yn

def main():

    parser = argparse.ArgumentParser(description="DESI spectroscopic calibration configuration editor")
    parser.add_argument('yaml_file', type = str, help = 'path of yaml file to modify')

    args = parser.parse_args()
    if not os.path.isfile(args.yaml_file) :
        print(f"The file {args.yaml_file} does not exist.")
        return

    data = load_yaml(args.yaml_file)
    camids = list(data.keys())
    if len(camids) == 0 :
        print("There are no entries in the YAML file. There needs to be at least one defining the camera id")
        sys.exit(12)
    if len(camids) > 1 :
        camid=input(f"Which camid do you want to edit among {camids}? ")
        while camid not in camids :
            camid=input(f"Please choose one among {camids}? ")
    else :
        camid=camids[0]
    camid_data=data[camid]

    configuration_names = list(camid_data.keys())
    print(f"Current configuration names for {camid} in the YAML file:")
    print(configuration_names)

    if yes_or_no("Do you want to create a new configuration?") == "y" :
        config_name=datetime.datetime.now().strftime('V%Y%m%d')
        iterator=1
        while config_name in configuration_names :
            config_name=datetime.datetime.now().strftime('V%Y%m%d')+f"-{iterator}"
            iterator += 1

        while yes_or_no(f"Is '{config_name}' OK?")=="n" :
            while True :
                config_name=input("Enter a new config name: ")
                if config_name in configuration_names :
                    print(f"Sorry {config_name} already exists")
                else :
                    break
        print(config_name)
        previous_config_name=configuration_names[0]
        yn = yes_or_no(f"Do you want to start from a copy of '{previous_config_name}' ?")
        if yn == "n" :
            while True :
                previous_config_name=input(f"Choose a previous configuration among {configuration_names}: ")
                if previous_config_name not in configuration_names :
                    print(f"'{previous_config_name}' is not in the list.")
                else :
                    break
        print(f"Starting from a copy of '{previous_config_name}' to '{config_name}'")
        # would like to insert at the beginning, so need a full copy:
        new_data = dict()
        new_data[config_name]=deepcopy(camid_data[previous_config_name])
        for c in camid_data.keys() :
            new_data[c] = camid_data[c]
        data[camid] = new_data
        camid_data  = data[camid]

    else :
        while True :
            config_name=input(f"Pick a configuration to modify: ")
            if config_name not in configuration_names :
                print(f"'{config_name}' is not in the list:")
                print(configuration_names)
            else :
                break
        print(f"Will edit '{config_name}'")

    configuration_data=camid_data[config_name]

    while True :
        print("----------------")
        print()
        for key,val in configuration_data.items() :
            print(f'{key}:{val}')
        print()
        akey=input('(a)dd or modify, (r)emove, (s)ave or (q)quit? ').lower()
        print(akey)
        action_keys=['a','r','s','q']
        while akey not in action_keys :
            akey = input(f"Please type a key in {action_keys}: ")
        if akey == "q" :
            sys.exit(0)
        if akey == "s" :
            yn = yes_or_no(f"Overwrite '{args.yaml_file}'?")
            if yn == "y" :
                outfilename=args.yaml_file
            else :
                outfilename = input(f"Enter output file name: ")
            break
        if akey == "r" :
            ikeys = input(f"Enter key(s) to remove:")
            keys=[]
            tmp = ikeys.split(" ")
            for t in tmp :
                tmp2 = t.strip().split(",")
                for t2 in tmp2 :
                   keys.append(t2)
            print(keys)
            for k in keys :
                print("Removing",k)
                configuration_data.pop(k)
        if akey == "a" :
            kv = input(f"Enter a 'key:value' : ")
            kv2=kv.split(":")
            if len(kv2) != 2:
                print(f"ERROR Cannot split '{kv}' as key:value\n")
                continue
            k=kv2[0].strip()
            v=safe_eval(kv2[1].strip())
            configuration_data[k]=v
            print(f"Set {k}:{v} with type {type(v)}")
    #print("Will write",outfilename)
    #sys.exit(12)
    #print("Updated content of the YAML file:")
    #print(yaml.dump(data, default_flow_style=False))
    save_yaml(data, outfilename+"-tmp")
    print("Changes:")
    res=subprocess.call(["diff",args.yaml_file,outfilename+"-tmp"])
    print()
    if yes_or_no("OK?") == "y" :
        os.rename(outfilename+"-tmp",outfilename)
        print(f"Changes saved to {outfilename}")
    else :
        os.unlink(outfilename+"-tmp")
        print(f"Aborting")

    sys.exit(12)

if __name__ == "__main__":
    main()
