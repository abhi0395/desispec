#!/usr/bin/env python

"""
Return information about the status of an exposure, tile, or night
"""

import os, sys, glob
import numpy as np
from astropy.table import Table, vstack

import argparse

from desispec.workflow.proctable import get_processing_table_pathname
from desispec.workflow.exptable import get_exposure_table_pathname
from desispec.workflow.queue import queue_info_from_qids
from desispec.workflow.tableio import load_table
from desispec.io.meta import specprod_root, findfile
from desispec.workflow.redshifts import get_ztile_script_pathname
from desiutil.log import get_logger
from desispec.parallel import stdouterr_redirected
import json

p = argparse.ArgumentParser()
p.add_argument('-e', '--expid', type=int, required=True,
        help='Exposure ID to get information about')
p.add_argument('-n', '--night', type=int, required=False,
        help='night to get information about')
#p.add_argument('-t', '--tileid', type=int, required=False,
#        help='Tile ID to get information about')
p.add_argument('-s', '--specprod', type=str, required=False,
        help=('override $SPECPROD, or full path '
              'to override $DESI_SPECTRO_REDUX/$SPECPROD'))


def print_row(row):
    nterminalwidth, nterminalheight = os. get_terminal_size()
    if row is None:
        print('None')
        return
    
    cols, items = [], []
    #for col, item in zip(row.keys(), row.values()):
    #    cols.append(col)
    #    items.append(item)
    cols = np.array(list(row.keys()), dtype=object)
    items = np.array(list(row.values()), dtype=object)
    i = 0
    topline = ""
    midline = ""
    bottomline = ""
    while i < len(cols):
        col = str(cols[i])
        value = str(items[i])
        maxlen = max(len(col), len(value))
        topline += col.center(maxlen) + '    '
        midline += ('-'*len(col)).center(maxlen) + '    '
        bottomline += value.center(maxlen) + '    '
        i += 1
        if len(topline) > nterminalwidth*0.8 or i==len(cols):
            print(topline)
            print(midline)
            print(bottomline, '\n')
            topline = ""
            midline = ""
            bottomline = ""
    

#if __name__ == '__main__':

args = p.parse_args()

night = args.night
tileid = args.tileid
expid = args.expid
expstr = str(expid)
zpadexpstr = expstr.zfill(8)
log = get_logger()

## Identify specprod
if args.specprod is not None and os.path.isdir(args.specprod):
    specproddir = args.specprod
else:
    specproddir = specprod_root(args.specprod)

## Define specprod for environment 
os.environ['DESI_SPECTRO_REDUX'] = os.path.dirname(specproddir)
os.environ['SPECPROD'] = os.path.basename(specproddir)


print("\n")
specprod_exposures_entry = None
if 'DESI_SPECTRO_REDUX' in os.environ:
    fname = os.path.join(specproddir,  f'exposures-{os.environ["SPECPROD"]}.csv')
    log.debug(f"Looking for exposures-{os.environ['SPECPROD']}.csv at {fname}")
    if os.path.exists(fname):
        log.info(f"Reading {fname}")
        tab = Table.read(fname)
        try:
            specprod_exposures_entry = tab[tab['EXPID']==expid][0]
            log.info(f'Identified specprod exposures-{os.environ["SPECPROD"]}.csv entry')
            if night is None:
                night = int(specprod_exposures_entry['NIGHT'])
            if tileid is None:
                tileid = int(specprod_exposures_entry['TILEID'])
        except:
            log.warning(f'No specprod exposures-{os.environ["SPECPROD"]}.csv entry')

surveyops_exposures_entry = None
if 'DESI_SURVEYOPS' in os.environ:
    fname = os.path.join(os.environ['DESI_SURVEYOPS'], 'ops', 'exposures.ecsv')
    log.debug(f"Looking for exposures.ecsv at {fname}")
    if os.path.exists(fname):
        log.info(f"Reading {fname}")
        tab = Table.read(fname)
        try:
            surveyops_exposures_entry = tab[tab['EXPID']==expid][0]
            log.info(f"Identified surveyops exposures.ecsv entry")
            if night is None:
                night = int(surveyops_exposures_entry['NIGHT'])
            if tileid is None:
                tileid = int(surveyops_exposures_entry['TILEID'])
        except:
            log.warning(f"No surveyops exposures.ecsv entry")


if night is None:
    etabs = []
    globstr = get_exposure_table_pathname(night='123456789').replace('123456789', '*').replace('1234567', '202???')
    log.debug(f"No night provided, so looking in all exposure_tables located in: {globstr}")
    warnings = list()
    with stdouterr_redirected():
        for fil in sorted(glob.glob(globstr)):
            try:
                etab = load_table(tablename=fil, tabletype='etable', suppress_logging=True)
            except:
                warnings.append(f"{fil} failed to load")
                continue        
            if len(etab) > 0:
                etabs.append(etab)
    for warning in warnings:
        log.warning(warning)
    etab = vstack(etabs)
else:
    etabname = get_exposure_table_pathname(night=str(night))
    etab= load_table(tablename=etabname, tabletype='etable')

erow = None
try:
    erow = etab[etab['EXPID']==expid][0]
    log.info(f"Identified specprod exposure_table entry")
    if night is None:
        night = int(erow['NIGHT'])
    if tileid is None:
        tileid = int(erow['TILEID'])
    etab = etab[etab['NIGHT']==night]
except:
    log.warning(f"No specprod exposure_table entry")



if night is None:
    if 'DESI_SPECTRO_DATA' in os.environ:
        globstr = os.path.join(os.environ['DESI_SPECTRO_DATA'], '????????', zpadexpstr)
        try:
            globs = glob.glob(globstr)[0]
            log.debug(f"Identified the following directories for expid {expid}: globs")
            rawexpdir = globs[0]
            rawnightdir = os.path.dirname(rawexpdir)
            night = int(os.path.basename(rawnightdir))
            log.info(f"Based on raw directories, identified night {night} for expid {expid}")
        except:
            log.error(f"Expid {expid} couldn't be identified in any files or in the raw data. Please check that it is valid.")
            raise(ValueError())
    else:
        log.error("DESI_SPECTRO_DATA not defined so can't search for in raw data.")
        raise(ValueError(f"Expid {expid} couldn't be identified. Please check that it is valid."))
    

#specstatus_entry = None
#if 'DESI_SURVEYOPS' not in os.environ:
#    fname = os.path.join(os.environ['DESI_SURVEYOPS'], 'ops', 'tiles-specstatus.ecsv')
#    if os.path.exists(fname):
#        tab = Table.read(fname)
#        specstatus_entry = tab[tab['TILEID']==tileid]

prows = list()
dashboard_row = None
jsonentries = None
if night is not None:
    ptabname = get_processing_table_pathname(None, str(night))
    log.info(f"Loading specprod processing table {ptabname}")
    ptab = load_table(tablename=ptabname, tabletype='ptable')
    expid_matches = [expid in prow['EXPID'] for prow in ptab]
    prows = ptab[np.array(expid_matches)]
    if len(prows) > 0:
        log.info("Identified specprod processing rows")
    else:
        log.warning("No specprod processing rows found")
    
    fname = os.path.join(specproddir, 'run', 'dashboard', 'expjsons', f'expinfo_daily_{night}.json')
    if os.path.exists(fname):
        log.info(f"Loading specprod dashboard data archive at {fname}")
        jsonentries = None
        with open(fname, 'r') as fstream:
            jsonentries = json.load(fstream)
        try:
            dashboard_row = jsonentries[f"science_{expid}"] # e.g. "science_166906"
            log.info("Found specprod dashboard data entry")
        except:
            log.warning(f"No specprod dashboard data entry entry")

        try:
            dashboard_row['TILEID'] = dashboard_row['TILEID'].split('>')[1].split('<')[0]
        except:
            pass
    else:
         log.warning(f"No specprod dashboard data archive at {fname}")    

#- Get the job state from rows that are actually slurm jobs
#ii = proctable['LATEST_QID']>0
#qinfo = queue_info_from_qids(proctable['LATEST_QID'][ii])
#jobinfo = {row['JOBID']:row for row in qinfo}
print("\n")
string = '# ' + f"Expid: {expid} was observed on {night=} for {tileid=}" + ' #'
print("#"*len(string) + '\n' + string + '\n' + '#'*len(string) + '\n')

print("\n#- Survey ops exposures entry:")
print_row(surveyops_exposures_entry)
print("\n\n#- Data ops exposure_table row:")
print_row(erow)
print("\n\n#- Data ops exposures table entry:")
print_row(specprod_exposures_entry)
print("\n\n#- Data ops processing table row:")
for prow in prows:
    print_row(prow)
print("\n\n#- Data ops processing dashboard summary data for exposure:")
print_row(dashboard_row)

#os.system(f"ls -lt $DESI_SPECTRO_DATA/{night}/{zpadexpstr}")
#print("\n")
#os.system(f"ls -lt {specproddir}/preproc/{night}/{zpadexpstr}")
#print("\n")
#os.system(f"ls -lt {specproddir}/exposures/{night}/{zpadexpstr}")

rawdataloc = os.path.join(os.environ['DESI_SPECTRO_DATA'], str(night), zpadexpstr)
print(f"\n#- Raw data in {rawdataloc}:")
os.system(f"ls $DESI_SPECTRO_DATA/{night}/{zpadexpstr}")
preprocloc = os.path.join(specproddir, 'preproc', str(night), zpadexpstr)
print(f"\n#- Preproc data in {preprocloc}:")
os.system(f"ls {specproddir}/preproc/{night}/{zpadexpstr}")
exposureloc = os.path.join(specproddir, 'exposures', str(night), zpadexpstr)
print(f"\n#- Processed exposure data in {exposureloc}:")
os.system(f"ls {specproddir}/exposures/{night}/{zpadexpstr}")

print("\n\n\n")
